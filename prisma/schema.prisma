generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model airports {
  airport_id                                     Int       @id @default(autoincrement())
  airport_code                                   String    @unique(map: "code") @db.VarChar(10)
  airport_name                                   String    @db.VarChar(100)
  city                                           String    @db.VarChar(100)
  flights_flights_departure_airport_idToairports flights[] @relation("flights_departure_airport_idToairports")
  flights_flights_arrival_airport_idToairports   flights[] @relation("flights_arrival_airport_idToairports")
}

model flights {
  flight_id                                       Int       @id @default(autoincrement())
  flight_number                                   String    @db.VarChar(20)
  departure_airport_id                            Int?
  arrival_airport_id                              Int?
  departure_time                                  DateTime? @db.DateTime(0)
  arrival_time                                    DateTime? @db.DateTime(0)
  price                                           Int
  created_at                                      DateTime? @db.DateTime(0)
  airports_flights_departure_airport_idToairports airports? @relation("flights_departure_airport_idToairports", fields: [departure_airport_id], references: [airport_id], onDelete: NoAction, onUpdate: NoAction, map: "flights_ibfk_1")
  airports_flights_arrival_airport_idToairports   airports? @relation("flights_arrival_airport_idToairports", fields: [arrival_airport_id], references: [airport_id], onDelete: NoAction, onUpdate: NoAction, map: "flights_ibfk_2")
  tickets                                         tickets[]

  @@index([arrival_airport_id], map: "arrival_airport_id")
  @@index([departure_airport_id], map: "departure_airport_id")
}

model tickets {
  ticket_id     Int       @id @default(autoincrement())
  ticket_number String    @unique(map: "ticket_number") @db.VarChar(20)
  flight_id     Int?
  user_id       Int?
  ticket_class  String?   @db.VarChar(100)
  price         Int
  status        String    @default("booked") @db.VarChar(20)
  passenger     Int?
  created_at    DateTime? @db.DateTime(0)
  flights       flights?  @relation(fields: [flight_id], references: [flight_id], onDelete: NoAction, onUpdate: NoAction, map: "tickets_ibfk_1")
  users         users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "tickets_ibfk_2")

  @@index([flight_id], map: "flight_id")
  @@index([user_id], map: "user_id")
}

model users {
  user_id       Int       @id @default(autoincrement())
  full_name     String    @db.VarChar(100)
  email         String    @unique(map: "email") @db.VarChar(100)
  password      String    @db.VarChar(255)
  gender        Int?      @db.TinyInt
  date_of_birth DateTime? @db.Date
  nationality   String?   @db.VarChar(100)
  cccd          String?   @db.VarChar(20)
  address       String?   @db.Text
  phone         String?   @db.VarChar(20)
  role          String    @db.VarChar(50)
  refresh_token String?   @db.Text
  tickets       tickets[]
}
